@using S01_PersonalBlog.Custom_helpers
@using Microsoft.AspNet.Identity
@model S01_PersonalBlog.ViewModels.CommentPartialViewModel

@{
    string UserId = User.Identity.GetUserId();
    bool IsAdmin = User.IsInRole("Admin");
}
<div class="container-fluid" data-comment-container>

    <div class="comment">
        <div class="row bg-info info-row vertical-align header">
            <div class="col-xs-4 col-sm-3">
                <span class="display-block comment-like-span"><span class="glyphicon glyphicon-thumbs-up" title="Likes"></span><span> Likes @Html.DisplayFor(m => m.Likes)</span></span>
                <span class="inline-block comment-dislike-span"><span class="glyphicon glyphicon-thumbs-down" title="DisLikes"></span><span> Dislikes @Html.DisplayFor(m => m.DisLikes)</span></span>
            </div>
            <div class="col-xs-7 col-sm-4">
                <span>Created </span> <nobr>@Html.DisplayFor(model => model.CommentDate)</nobr>
            </div>
            <div class="col-xs-7 col-sm-5">
                <a href="@Url.RouteUrl("Default", new { action = "Details", controller = "Bloggers", id = Model.Author.BloggerId})" class="comment-author-link">
                    <span>Author @Html.DisplayFor(model => model.Author.NickName) <img @Html.GetImageURL(Model.Author.ImageFileName) class="comment-author-avatar img-circle" /></span>
                </a>
            </div>
        </div>

        <div class="row content">
            <div class="col col-md-8">
                @Html.DisplayFor(model => model.Content)
            </div>
        </div>

        <div class="row footer bg-success text-justify info-row vertical-align">
            <div class="col col-xs-2">
                <span class="glyphicon glyphicon-comment" title="Comments"></span> @Html.DisplayFor(model => model.Comments.Count)
            </div>
            <div class="col-xs-5 comment-vote-div">
                @using (Html.BeginRouteForm("Comment", new { action = "UpVote", postId = Model.PostID, commentID = Model.CommentID }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken();
                    <button type="submit" class="like-link">
                        <span class="glyphicon glyphicon-thumbs-up"></span>
                        <span> Like</span>
                        <span class="comment-liked-indicator @Html.UserLiked(Model.CurrentUserVote)"></span>
                    </button>
                }
                &nbsp;or&nbsp;
                @using (Html.BeginRouteForm("Comment", new { action = "DownVote", postId = Model.PostID, commentID = Model.CommentID }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken();
                    <button type="submit" class="like-link">
                        <span>Dislike</span>
                        <span class="glyphicon glyphicon-thumbs-down"></span>
                        <span class="comment-liked-indicator @Html.UserDisliked(Model.CurrentUserVote)"></span>
                    </button>
                }
            </div>
            @if (Model.NestingLevel <= 2)
            {
                <div class="col-xs-5 col-md-3 col-md-pull-1">
                    <span class="label label-primary">
                        @Html.RouteLink("Reply", "Comment", new
                   {
                       controller = "Comments",
                       action = "Create",
                       postId = Model.PostID,
                       commentId = Model.CommentID
                   },
                    htmlAttributes: new { data_comment_form_trigger = "" })
                        <span class="glyphicon glyphicon-comment"></span><label class="plus-sign">+</label>
                    </span>
                </div>
            }
        </div>
        @if (Model.AuthorID == UserId || IsAdmin)
        {
            <div class="row">
                <div class="col-md-4">
                    @Html.RouteLink("Edit", "Comment", routeValues: new { action = "Edit", postId = Model.PostID, commentID = Model.CommentID }) |
                    @Html.RouteLink("Delete", "Comment", routeValues: new { action = "Delete", postId = Model.PostID, commentID = Model.CommentID })
                </div>
            </div>
        }
    </div>
    @if (Model.Comments.Count > 0)
    {
        foreach (var comment in Model.Comments)
        {
            <div class="fix-margin">
                @Html.Partial("_Comment", comment)
            </div>
        }
    }
</div>
